"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2799],{98853:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var a=n(74848),i=n(28453);const o={},s="countrycitystatejson",r={id:"countrycitystatejson",title:"countrycitystatejson",description:"JSON formatted data containing the world's countries, states/provinces, and cities.",source:"@site/google/countrycitystatejson.md",sourceDirName:".",slug:"/countrycitystatejson",permalink:"/google/countrycitystatejson",draft:!1,unlisted:!1,editUrl:"https://github.com/hyaliyun/Country/edit/main/website/google/countrycitystatejson.md",tags:[],version:"current",frontMatter:{},sidebar:"devDocsSidebar",previous:{title:"country-state-city",permalink:"/google/country-state-city"},next:{title:"location4j \ud83c\udf0e4\ufe0f\u20e3\u2668\ufe0f",permalink:"/google/location4j"}},d={},h=[{value:"yourhandle.getAll()",id:"yourhandlegetall",level:2},{value:"yourhandle.getCountries()",id:"yourhandlegetcountries",level:2},{value:"yourhandle.getCountriesShort()",id:"yourhandlegetcountriesshort",level:2},{value:"yourhandle.getCountryByShort(shortName)",id:"yourhandlegetcountrybyshortshortname",level:2},{value:"yourhandle.getCountryInfoByShort(shortName)",id:"yourhandlegetcountryinfobyshortshortname",level:2},{value:"yourhandle.getStatesByShort(shortName)",id:"yourhandlegetstatesbyshortshortname",level:2},{value:"yourhandle.getCities(shortName, state)",id:"yourhandlegetcitiesshortname-state",level:2},{value:"yourhandle.getCitiesByName(cityName) // this is not cheap",id:"yourhandlegetcitiesbynamecityname--this-is-not-cheap",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"countrycitystatejson",children:"countrycitystatejson"})}),"\n",(0,a.jsx)(t.p,{children:"JSON formatted data containing the world's countries, states/provinces, and cities."}),"\n",(0,a.jsxs)(t.p,{children:["#NPM\n",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/countrycitystatejson",children:"https://www.npmjs.com/package/countrycitystatejson"})]}),"\n",(0,a.jsx)(t.h1,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"2023-03-27 Fixes to Maldives\n2023-02-15 More fixes to Australian cities. (Thanks again andrewjdavidson)\n2022-10-21 Fixed some Australian city and state information.  (Thanks andrewjdavidson)\n2021-10-14 Some optimizations\n2021-10-13 Added getCitiesByName method.\nMore accurate Nigerian states and cities.  (Thanks TheoOkafor)\n"})}),"\n",(0,a.jsx)(t.h1,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"const yourhandle= require('countrycitystatejson')\n"})}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetall",children:"yourhandle.getAll()"}),"\n",(0,a.jsx)(t.p,{children:"Returns entire DB in JSON format.  ~ 2.5MB"}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetcountries",children:"yourhandle.getCountries()"}),"\n",(0,a.jsx)(t.p,{children:"Returns all countries with their associated information as well as their short name (Country abbreviation)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"[\n...\n\t{ shortName: 'HK',\n    name: 'Hong Kong',\n    native: '\u9999\u6e2f',\n    phone: '852',\n    continent: 'AS',\n    capital: 'City of Victoria',\n    currency: 'HKD',\n    languages: [ 'zh', 'en' ],\n    emoji: '\ud83c\udded\ud83c\uddf0',\n    emojiU: 'U+1F1ED U+1F1F0' },\n  { shortName: 'HM',\n    name: 'Heard Island and McDonald Islands',\n    native: 'Heard Island and McDonald Islands',\n    phone: '61',\n    continent: 'AN',\n    capital: '',\n    currency: 'AUD',\n    languages: [ 'en' ],\n    emoji: '\ud83c\udded\ud83c\uddf2',\n    emojiU: 'U+1F1ED U+1F1F2' },\n  { shortName: 'HN',\n    name: 'Honduras',\n    native: 'Honduras',\n    phone: '504',\n    continent: 'NA',\n    capital: 'Tegucigalpa',\n    currency: 'HNL',\n    languages: [ 'es' ],\n    emoji: '\ud83c\udded\ud83c\uddf3',\n    emojiU: 'U+1F1ED U+1F1F3' },\n\t...\n]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetcountriesshort",children:"yourhandle.getCountriesShort()"}),"\n",(0,a.jsx)(t.p,{children:"Returns an array of Countries' short names:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"[ 'AD',\n  'AE',\n  'AF',\n  'AG',\n  'AI',\n  'AL',\n    ...\n]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetcountrybyshortshortname",children:"yourhandle.getCountryByShort(shortName)"}),"\n",(0,a.jsx)(t.p,{children:"Returns an object containing country data, as well as an embedded object with the state/province name as the key, where the value is an array of cities."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"yourhandle.getCountryByShort('US')\n\n{ name: 'United States',\n  native: 'United States',\n  phone: '1',\n  continent: 'NA',\n  capital: 'Washington D.C.',\n  currency: 'USD,USN,USS',\n  languages: [ 'en' ],\n  emoji: '\ud83c\uddfa\ud83c\uddf8',\n  emojiU: 'U+1F1FA U+1F1F8',\n  states:\n   { Alabama:\n      [ [Object],\n        [Object],\n        [Object],\n\t\t\t\t...\n\t\t\t]\n\t }\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetcountryinfobyshortshortname",children:"yourhandle.getCountryInfoByShort(shortName)"}),"\n",(0,a.jsx)(t.p,{children:"Returns the same object as above except without the states property."}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetstatesbyshortshortname",children:"yourhandle.getStatesByShort(shortName)"}),"\n",(0,a.jsx)(t.p,{children:"For a given country short name, returns an array of the list of states"}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetcitiesshortname-state",children:"yourhandle.getCities(shortName, state)"}),"\n",(0,a.jsx)(t.p,{children:"Parameters: Country short name and the name of the state matching the result of GetStatesByShort.  See Above.  Returns an array of cities belonging to the given state/province."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"yourhandle.getCities('US','Kentucky')\n\n[ 'Albany',\n  'Ashland',\n  'Bardstown',\n  'Berea',\n  'Bowling Green',\n  'Campbellsville',\n  'Catlettsburg',\n  'Covington',\n  'Crescent Springs',\n  ...\n]\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"yourhandlegetcitiesbynamecityname--this-is-not-cheap",children:"yourhandle.getCitiesByName(cityName) // this is not cheap"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"yourhandle.getCitiesByName('lexington')\n\n[\n  { id: '44606', name: 'Lexington', state_id: '3938' },\n  { id: '44841', name: 'Lexington Park', state_id: '3942' },\n  { id: '44970', name: 'Lexington', state_id: '3943' },\n  { id: '45561', name: 'Lexington', state_id: '3950' },\n  { id: '48179', name: 'Lexington', state_id: '3957' },\n  { id: '48249', name: 'Lexington', state_id: '3966' },\n  { id: '44607', name: 'Lexington-Fayette', state_id: '3938' }\n]\n"})}),"\n",(0,a.jsx)(t.h1,{id:"editing-and-adding-data-to-origin-sources",children:"Editing and adding data to origin sources"}),"\n",(0,a.jsx)(t.p,{children:"Found an error, missing data?  No problem.  The original data set was pulled from other npm packages.  They are indeed not 100% complete and not 100% error free."}),"\n",(0,a.jsxs)(t.p,{children:["The data sources have been included in the './src' folder.  For example, if you need to edit country information, you will want to edit ",(0,a.jsx)(t.code,{children:"./src/countries-list/dist/countries.json"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["For cities and states, you will want to edit ",(0,a.jsx)(t.code,{children:"./src/country-state-city/lib/city.json"})," or ",(0,a.jsx)(t.code,{children:"state.json"}),'.  Notice that in state.json there is a id element.  That "id" element is indexed in city.json to form a relationship.  So if you want to add a city and connect it the state, find, the state in state.json, get the "id" value and set that as the state id in the city.json file.']}),"\n",(0,a.jsx)(t.p,{children:"Editing or updating the sources will require a recompile.  The recompile script is under lib.  Just run"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"$ node compilecountries.js\n"})}),"\n",(0,a.jsxs)(t.p,{children:["and it will write out to ",(0,a.jsx)(t.code,{children:"compiledCities.json"})," (hardcoded file name)."]}),"\n",(0,a.jsx)(t.p,{children:"compiledCities.json is where the convencience functions (see above) read from."}),"\n",(0,a.jsx)(t.p,{children:"I hope this is clear so that any edits, fixes, and changes can be easily and quickly done by everyone.  Please, if you do have a fix, be sure to submit it, so we can share the fix with everyone."}),"\n",(0,a.jsx)(t.h1,{id:"what-why",children:"What? Why?"}),"\n",(0,a.jsx)(t.p,{children:"In my search for a good database in JSON format that contained Countries and their associated states and cities, I found disparate solutions."}),"\n",(0,a.jsxs)(t.p,{children:["While I found a great database of countries from ",(0,a.jsx)(t.a,{href:"https://github.com/annexare/Countries",children:"https://github.com/annexare/Countries"})," and a great database of cities from ",(0,a.jsx)(t.a,{href:"https://github.com/lutangar/cities.json",children:"https://github.com/lutangar/cities.json"}),", I required a linkage between them via states/provinces.  I did indeed found a solution ",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/country-state-city",children:"https://www.npmjs.com/package/country-state-city"}),".  However, it did not have rich enough data from the other databases.  In addition, a spot check on that particular database showed errors.  The United States showed 57 states, those 7 extra entries were also incorrect (e.g. it contained state entries for the US named: Midland, Seward, Lowa, etc)."]}),"\n",(0,a.jsx)(t.p,{children:"Why didn't I just fix it and make a pull request you say?  The issue with that particular database was that the entries were linked together with integer ID's.  So in order to lookup a list of states in a country, you need to use the country id.  This indexing scheme extended down the hierarchy; in order to find the cities of a state, the parameter was a a state id, which stemmed from a country id.  While this indexing scheme is high performant, it made edits and updates (due to errors I found) to the data somewhat painful.  Any change in or update would require a reindexing of the whole data set."}),"\n",(0,a.jsxs)(t.p,{children:["So in order for me to remove the 7 erroneous US states, extra code would need to be written to reindex.  The solution I present you merges the rich data from ",(0,a.jsx)(t.a,{href:"https://github.com/annexare/Countries",children:"https://github.com/annexare/Countries"}),", merges it with ",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/country-state-city",children:"https://www.npmjs.com/package/country-state-city"})," and replaces the integer indexing scheme with named keys."]}),"\n",(0,a.jsx)(t.p,{children:"This makes recompiling the final JSON object easier.  Any edits to the underyling raw data can recompile the final json without a need for indexing.  I'm making the assumption that there will be more edits and updates required.  I personally only fixed the 7 erroneous states for country code US, and have not confirmed any other state/province and city for accuracy.  In addition, removing the integer id indexing and replacing it with named indeces should not have a performance hit if you are using the V8 engine."})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(96540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);