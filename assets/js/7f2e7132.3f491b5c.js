"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6020],{42769:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>l,toc:()=>o});var t=n(74848),r=n(28453);const d={},a="parse-address-string",l={id:"parse-address-string",title:"parse-address-string",description:"Build Status",source:"@site/google/parse-address-string.md",sourceDirName:".",slug:"/parse-address-string",permalink:"/google/parse-address-string",draft:!1,unlisted:!1,editUrl:"https://github.com/hyaliyun/Country/edit/main/website/google/parse-address-string.md",tags:[],version:"current",frontMatter:{},sidebar:"devDocsSidebar",previous:{title:"location4j \ud83c\udf0e4\ufe0f\u20e3\u2668\ufe0f",permalink:"/google/location4j"},next:{title:"Support",permalink:"/google/support"}},i={},o=[{value:"Example",id:"example",level:2},{value:"Notes",id:"notes",level:2},{value:"Api",id:"api",level:2},{value:"parseAddress( addressString, callback )",id:"parseaddress-addressstring-callback-",level:3},{value:"parseAddress.explodeAddress( addressString, callback )",id:"parseaddressexplodeaddress-addressstring-callback-",level:3},{value:"parseAddress.implodeAddress( addressObject, callback)",id:"parseaddressimplodeaddress-addressobject-callback",level:3},{value:"Test Cases",id:"test-cases",level:3},{value:"To Do",id:"to-do",level:2}];function c(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"http://travis-ci.org/fluffybunnies/parse-address-string",children:(0,t.jsx)(s.img,{src:"https://secure.travis-ci.org/fluffybunnies/parse-address-string.png",alt:"Build Status"})})}),"\n",(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"parse-address-string",children:"parse-address-string"})}),"\n",(0,t.jsx)(s.p,{children:"Extract street, city, state, zip, and country components from single-line address string"}),"\n",(0,t.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-javascript",children:"var parseAddress = require('parse-address-string')\n\nparseAddress('4296 W 7th St, Long Beach, CA 90802', function(err,addressObj){\n\tconsole.log('Street: ', addressObj.street_address1)\n\tconsole.log('City: ', addressObj.city)\n\tconsole.log('State: ', addressObj.state)\n\tconsole.log('Zip: ', addressObj.postal_code)\n\tconsole.log('Country: ', addressObj.country)\n})\n"})}),"\n",(0,t.jsx)(s.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["This version currently targets US and Canada\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Many other North American and European countries follow the same standard, but are not explicitly supported in this build"}),"\n",(0,t.jsxs)(s.li,{children:["Updating ",(0,t.jsx)(s.code,{children:"lib/*.json"})," would get you 90% of the way there"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"explodeAddress"})," conflates Street1 and Street2 as it is economically expensive to parse with high enough consistency\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:'Would require a dictionary of prefix terms ("apt", "ste", etc) with heuristics to ensure it wasn\'t part of Street1'}),"\n",(0,t.jsx)(s.li,{children:"May add support for this in future versions"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.li,{children:"Async callback format is for interoperability with potential future versions of this module, or if you wanted to swap it out with (for example) a call directly to google maps api"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"api",children:"Api"}),"\n",(0,t.jsx)(s.h3,{id:"parseaddress-addressstring-callback-",children:"parseAddress( addressString, callback )"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"addressString"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"callback(err, addressObj)"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"err"})," will always be false in current version, should still check ",(0,t.jsx)(s.code,{children:"if (err)"})," for future compatibility"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"addressObj"})," has string or NULL properties ",(0,t.jsx)(s.code,{children:"street_address1"}),", ",(0,t.jsx)(s.code,{children:"street_address2"}),", ",(0,t.jsx)(s.code,{children:"city"}),", ",(0,t.jsx)(s.code,{children:"state"}),", ",(0,t.jsx)(s.code,{children:"postal_code"}),", ",(0,t.jsx)(s.code,{children:"country"})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"parseaddressexplodeaddress-addressstring-callback-",children:"parseAddress.explodeAddress( addressString, callback )"}),"\n",(0,t.jsxs)(s.p,{children:["Same as ",(0,t.jsx)(s.code,{children:"parseAddress()"})]}),"\n",(0,t.jsx)(s.h3,{id:"parseaddressimplodeaddress-addressobject-callback",children:"parseAddress.implodeAddress( addressObject, callback)"}),"\n",(0,t.jsxs)(s.p,{children:["Inverse of ",(0,t.jsx)(s.code,{children:"explodeAddress"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"addressObject"})," - Object with some properties ",(0,t.jsx)(s.code,{children:"street_address1"}),", ",(0,t.jsx)(s.code,{children:"street_address2"}),", ",(0,t.jsx)(s.code,{children:"city"}),", ",(0,t.jsx)(s.code,{children:"state"}),", ",(0,t.jsx)(s.code,{children:"postal_code"}),", ",(0,t.jsx)(s.code,{children:"country"})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"callback(err, addressStr)"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"err"})," will always be false in current version, should still check ",(0,t.jsx)(s.code,{children:"if (err)"})," for future compatibility"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"addressStr"})," Follows inline US/CA address format standard: ",(0,t.jsx)(s.em,{children:"Street1 Street2, City, State PostalCode, Country"}),"*",(0,t.jsx)(s.br,{}),"\n*See APA, usps.gov, google maps, etc"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"test-cases",children:"Test Cases"}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.code,{children:"test/test.js"})," for more"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"// Street address looks like a zip code\nparseAddress('90007 W Washington Blvd, Santa Monica, California 90007')\n=> {\n\tstreet_address1: '90007 W Washington Blvd',\n\tcity: 'Santa Monica',\n\tstate: 'California',\n\tpostal_code: '90007',\n\tcountry: null\n}\n\n// State with two names spelled out\nparseAddress('306 Deep Creek Rd, Fayetteville, North Carolina 28312')\n=> {\n\tstreet_address1: '306 Deep Creek Rd',\n\tcity: 'Fayetteville',\n\tstate: 'North Carolina',\n\tpostal_code: '28312',\n\tcountry: null\n}\n\n// Country is appended with comma\nparseAddress('1842 W Washington Blvd, Los Angeles, CA 90007, US')\n=> {\n\tstreet_address1: '1842 W Washington Blvd',\n\tcity: 'Los Angeles',\n\tstate: 'CA',\n\tpostal_code: '90007',\n\tcountry: 'US'\n}\n\n// Country is appended without comma\nparseAddress('1842 W Washington Blvd, Los Angeles, CA 90007 USA')\n=> {\n\tstreet_address1: '1842 W Washington Blvd',\n\tcity: 'Los Angeles',\n\tstate: 'CA',\n\tpostal_code: '90007',\n\tcountry: 'USA'\n}\n\n// Canada\nparseAddress('646 Union Ave E, Winnipeg, MB R2L 1A4, Canada')\n=> {\n\tstreet_address1: '646 Union Ave E',\n\tcity: 'Winnipeg',\n\tstate: 'MB',\n\tpostal_code: 'R2L 1A4',\n\tcountry: 'Canada'\n}\n\n// Canada - no country indicator\nparseAddress('229 Begin St W, Thunder Bay, ON P7E 5M5')\n=> {\n\tstreet_address1: '229 Begin St W',\n\tcity: 'Thunder Bay',\n\tstate: 'ON',\n\tpostal_code: 'P7E 5M5',\n\tcountry: null\n}\n\n// Street address + city + state only (no postal code)\nparseAddress('3300-3332 Glen Koester Ln, Idaho Falls, ID')\n=> {\n\tstreet_address1: '3300-3332 Glen Koester Ln',\n\tcity: 'Idaho Falls',\n\tstate: 'ID',\n\tpostal_code: null,\n\tcountry: null\n}\n\n// Street address + city only\nparseAddress('757 Juntura-Riverside Rd, Riverside')\n=> {\n\tstreet_address1: '757 Juntura-Riverside Rd',\n\tcity: 'Riverside',\n\tstate: null,\n\tpostal_code: null,\n\tcountry: null\n}\n\n// Street address + postal code only\nparseAddress('1813 Linda Vista Cir, 92831')\n=> {\n\tstreet_address1: '1813 Linda Vista Cir',\n\tcity: null,\n\tstate: null,\n\tpostal_code: '92831',\n\tcountry: null\n}\n\n// Street address only\nparseAddress('145 Parkway Ave')\n=> {\n\tstreet_address1: '145 Parkway Ave',\n\tcity:  null,\n\tstate: null,\n\tpostal_code: null,\n\tcountry: null\n}\n\n// City only\nparseAddress('Los Angeles')\n=> {\n\tstreet_address1: null,\n\tcity:  'Los Angeles',\n\tstate: null,\n\tpostal_code: null,\n\tcountry: null\n}\n\n// State only\nparseAddress('NJ')\n=> {\n\tstreet_address1: null,\n\tcity:  null,\n\tstate: 'NJ',\n\tpostal_code: null,\n\tcountry: null\n}\n\n// Postal code only\nparseAddress('13820')\n=> {\n\tstreet_address1: null,\n\tcity:  null,\n\tstate: null,\n\tpostal_code: '13820',\n\tcountry: null\n}\n\n// Country only\nparseAddress('United States')\n=> {\n\tstreet_address1: null,\n\tcity:  null,\n\tstate: null,\n\tpostal_code: null,\n\tcountry: 'United States'\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"to-do",children:"To Do"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Extract Street2"}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(96540);const r={},d=t.createContext(r);function a(e){const s=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(d.Provider,{value:s},e.children)}}}]);